        -:    0:Source:cardtest2.c
        -:    0:Graph:cardtest2.gcno
        -:    0:Data:cardtest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2: * cardtest4.c
        -:    3: *
        -:    4: 
        -:    5: */
        -:    6:
        -:    7:/*
        -:    8: * Include the following lines in your makefile:
        -:    9: *
        -:   10: * cardtest4: cardtest4.c dominion.o rngs.o
        -:   11: *      gcc -o cardtest1 -g  cardtest4.c dominion.o rngs.o $(CFLAGS)
        -:   12: 
        -:   13:
        -:   14:
        -:   15: 			***This code/file is a placeholder for an actual cardtest
        -:   16: */
        -:   17:
        -:   18:
        -:   19:#include "dominion.h"
        -:   20:#include "dominion_helpers.h"
        -:   21:#include <string.h>
        -:   22:#include <stdio.h>
        -:   23:#include <assert.h>
        -:   24:#include "rngs.h"
        -:   25:#include <stdlib.h>
        -:   26:
        -:   27:#define TESTCARD "steward"
        -:   28:
        -:   29:int main() {
        1:   30:    int newCards = 0;
        1:   31:    int discarded = 1;
        1:   32:    int xtraCoins = 0;
        1:   33:    int shuffledCards = 0;
        -:   34:
        -:   35:    int i, j, m;
        1:   36:    int handpos = 0, choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0;
        -:   37:    int remove1, remove2;
        1:   38:    int seed = 1000;
        1:   39:    int numPlayers = 2;
        1:   40:    int thisPlayer = 0;
        -:   41:	struct gameState G, testG;
        1:   42:	int k[10] = {adventurer, embargo, village, minion, mine, cutpurse,
        -:   43:			sea_hag, tribute, smithy, council_room};
        -:   44:
        -:   45:	// initialize a game state and player cards
        1:   46:	initializeGame(numPlayers, k, seed, &G);
        -:   47:
        1:   48:	printf("----------------- Testing Card: %s ----------------\n", TESTCARD);
        -:   49:
        -:   50:	// ----------- TEST 1: choice1 = 1 = +2 cards --------------
        1:   51:	printf("TEST 1: choice1 = 1 = +2 cards\n");
        -:   52:
        -:   53:	// copy the game state to a test case
        1:   54:	memcpy(&testG, &G, sizeof(struct gameState));
        1:   55:	choice1 = 1;
        1:   56:	cardEffect(steward, choice1, choice2, choice3, &testG, handpos, &bonus);
        -:   57:
        1:   58:	newCards = 2;
        1:   59:	xtraCoins = 0;
        1:   60:	printf("hand count = %d, expected = %d\n", testG.handCount[thisPlayer], G.handCount[thisPlayer] + newCards - discarded);
        1:   61:	printf("deck count = %d, expected = %d\n", testG.deckCount[thisPlayer], G.deckCount[thisPlayer] - newCards + shuffledCards);
        1:   62:	printf("coins = %d, expected = %d\n", testG.coins, G.coins + xtraCoins);
        2:   63:	assert(testG.handCount[thisPlayer] == G.handCount[thisPlayer] + newCards - discarded);
        2:   64:	assert(testG.deckCount[thisPlayer] == G.deckCount[thisPlayer] - newCards + shuffledCards);
        2:   65:	assert(testG.coins == G.coins + xtraCoins);
        -:   66:
        -:   67:	// ----------- TEST 2: choice1 = 2 = +2 coins --------------
        1:   68:	printf("TEST 2: choice1 = 2 = +2 coins\n");
        -:   69:
        -:   70:	// copy the game state to a test case
        1:   71:	memcpy(&testG, &G, sizeof(struct gameState));
        1:   72:	choice1 = 2;
        1:   73:	cardEffect(steward, choice1, choice2, choice3, &testG, handpos, &bonus);
        -:   74:
        1:   75:	newCards = 0;
        1:   76:	xtraCoins = 2;
        1:   77:	printf("hand count = %d, expected = %d\n", testG.handCount[thisPlayer], G.handCount[thisPlayer] + newCards - discarded);
        1:   78:	printf("deck count = %d, expected = %d\n", testG.deckCount[thisPlayer], G.deckCount[thisPlayer] - newCards + shuffledCards);
        1:   79:	printf("coins = %d, expected = %d\n", testG.coins, G.coins + xtraCoins);
        2:   80:	assert(testG.handCount[thisPlayer] == G.handCount[thisPlayer] + newCards - discarded);
        2:   81:	assert(testG.deckCount[thisPlayer] == G.deckCount[thisPlayer] - newCards + shuffledCards);
        2:   82:	assert(testG.coins == G.coins + xtraCoins);
        -:   83:
        -:   84:	// ----------- TEST 3: choice1 = 3 = trash two cards --------------
        -:   85:
        1:   86:	printf("TEST 3: choice1 = 3 = trash two cards\n");
        1:   87:	choice1 = 3;
        -:   88:
        -:   89:	// cycle through each eligible combination of 2 cards to trash
       10:   90:	for (i=1; i<G.handCount[thisPlayer]; i++) {
       20:   91:		for (j=i+1; j<G.handCount[thisPlayer]; j++) {
        -:   92:
        6:   93:			G.hand[thisPlayer][0] = steward;
        6:   94:			G.hand[thisPlayer][1] = copper;
        6:   95:			G.hand[thisPlayer][2] = duchy;
        6:   96:			G.hand[thisPlayer][3] = estate;
        6:   97:			G.hand[thisPlayer][4] = feast;
        -:   98:
        -:   99:			// copy the game state to a test case
        6:  100:			memcpy(&testG, &G, sizeof(struct gameState));
        -:  101:
        6:  102:			printf("starting cards: ");
       72:  103:			for (m=0; m<testG.handCount[thisPlayer]; m++) {
       30:  104:				printf("(%d)", testG.hand[thisPlayer][m]);
       30:  105:			}
        6:  106:			printf("; ");
        -:  107:
        6:  108:			choice2 = j;
        6:  109:			choice3 = i;
        6:  110:			remove1 = testG.hand[thisPlayer][i];
        6:  111:			remove2 = testG.hand[thisPlayer][j];
        6:  112:			cardEffect(steward, choice1, choice2, choice3, &testG, handpos, &bonus);
        -:  113:
        6:  114:			printf("removed: (%d)(%d); ", remove1, remove2);
        6:  115:			printf("ending cards: ");
        -:  116:
        -:  117:			// tests that the removed cards are no longer in the player's hand
       36:  118:			for (m=0; m<testG.handCount[thisPlayer]; m++) {
       12:  119:				printf("(%d)", testG.hand[thisPlayer][m]);
       24:  120:				assert(testG.hand[thisPlayer][m] != remove1);
       24:  121:				assert(testG.hand[thisPlayer][m] != remove2);
       12:  122:			}
        6:  123:			printf(", expected: ");
       60:  124:			for (m=1; m<G.handCount[thisPlayer]; m++) {
       42:  125:				if (G.hand[thisPlayer][m] != G.hand[thisPlayer][i] && G.hand[thisPlayer][m] != G.hand[thisPlayer][j]) {
       12:  126:					printf("(%d)", G.hand[thisPlayer][m]);
       12:  127:				}
       24:  128:			}
        6:  129:			printf("\n");
        -:  130:
        -:  131:			// tests for the appropriate number of remaining cards
        6:  132:			newCards = 0;
        6:  133:			xtraCoins = 0;
        6:  134:			discarded = 3;
        9:  135:			if (i==1 && j==2) {
        1:  136:				printf("hand count = %d, expected = %d\n", testG.handCount[thisPlayer], G.handCount[thisPlayer] + newCards - discarded);
        1:  137:				printf("deck count = %d, expected = %d\n", testG.deckCount[thisPlayer], G.deckCount[thisPlayer] - newCards + shuffledCards);
        1:  138:			}
       12:  139:			assert(testG.handCount[thisPlayer] == G.handCount[thisPlayer] + newCards - discarded);
       12:  140:			assert(testG.deckCount[thisPlayer] == G.deckCount[thisPlayer] - newCards + shuffledCards);
        6:  141:		}
        -:  142:
        4:  143:	}
        -:  144:
        1:  145:	printf("\n >>>>> SUCCESS: Testing complete %s <<<<<\n\n", TESTCARD);
        -:  146:
        -:  147:
        1:  148:	return 0;
        -:  149:}
