        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:int compare(const void* a, const void* b) {
      168:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
      168:   11:  if (*(int*)a < *(int*)b)
       60:   12:    return -1;
      108:   13:  return 0;
      168:   14:}
        -:   15:
        -:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
        -:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
        1:   23:  int* k = malloc(10 * sizeof(int));
        1:   24:  k[0] = k1;
        1:   25:  k[1] = k2;
        1:   26:  k[2] = k3;
        1:   27:  k[3] = k4;
        1:   28:  k[4] = k5;
        1:   29:  k[5] = k6;
        1:   30:  k[6] = k7;
        1:   31:  k[7] = k8;
        1:   32:  k[8] = k9;
        1:   33:  k[9] = k10;
        1:   34:  return k;
        -:   35:}
        -:   36:
        -:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
        5:   44:  SelectStream(1);
        5:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
       10:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        5:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
      110:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
     1100:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
      950:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
      500:   65:        }
       50:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        5:   73:  if (numPlayers == 2)
        -:   74:    {
        4:   75:      state->supplyCount[curse] = 10;
        4:   76:    }
        1:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
    #####:   80:    }
        -:   81:  else
        -:   82:    {
        1:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        5:   87:  if (numPlayers == 2)
        -:   88:    {
        4:   89:      state->supplyCount[estate] = 8;
        4:   90:      state->supplyCount[duchy] = 8;
        4:   91:      state->supplyCount[province] = 8;
        4:   92:    }
        -:   93:  else
        -:   94:    {
        1:   95:      state->supplyCount[estate] = 12;
        1:   96:      state->supplyCount[duchy] = 12;
        1:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        5:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        5:  102:  state->supplyCount[silver] = 40;
        5:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      210:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
     1650:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
      775:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       99:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
        2:  115:		  if (numPlayers == 2){ 
    #####:  116:		    state->supplyCount[i] = 8; 
    #####:  117:		  }
        2:  118:		  else{ state->supplyCount[i] = 12; }
        2:  119:		}
        -:  120:	      else
        -:  121:		{
       48:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       50:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
      725:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
      725:  130:	}
        -:  131:
      100:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       34:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
       12:  140:      state->deckCount[i] = 0;
       96:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
       36:  143:	  state->deck[i][j] = estate;
       36:  144:	  state->deckCount[i]++;
       36:  145:	}
      192:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
       84:  148:	  state->deck[i][j] = copper;
       84:  149:	  state->deckCount[i]++;		
       84:  150:	}
       12:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       34:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
       12:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
       12:  160:    }
        -:  161:
        -:  162:  //draw player hands
       34:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
       12:  166:      state->handCount[i] = 0;
       12:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
       12:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
      280:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
      135:  178:      state->embargoTokens[i] = 0;
      135:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        5:  182:  state->outpostPlayed = 0;
        5:  183:  state->phase = 0;
        5:  184:  state->numActions = 1;
        5:  185:  state->numBuys = 1;
        5:  186:  state->playedCardCount = 0;
        5:  187:  state->whoseTurn = 0;
        5:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       60:  192:  for (it = 0; it < 5; it++){
       25:  193:    drawCard(state->whoseTurn, state);
       25:  194:  }
        -:  195:
        5:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
        5:  198:  return 0;
        5:  199:}
        -:  200:
        -:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       12:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       12:  209:  if (state->deckCount[player] < 1)
    #####:  210:    return -1;
       12:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      264:  214:  while (state->deckCount[player] > 0) {
      120:  215:    card = floor(Random() * state->deckCount[player]);
      120:  216:    newDeck[newDeckPos] = state->deck[player][card];
      120:  217:    newDeckPos++;
      838:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
      299:  219:      state->deck[player][i] = state->deck[player][i+1];
      299:  220:    }
      120:  221:    state->deckCount[player]--;
        -:  222:  }
      264:  223:  for (i = 0; i < newDeckPos; i++) {
      120:  224:    state->deck[player][i] = newDeck[i];
      120:  225:    state->deckCount[player]++;
      120:  226:  }
        -:  227:
       12:  228:  return 0;
       12:  229:}
        -:  230:
        -:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
    #####:  270:}
        -:  271:
        -:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
    #####:  309:}
        -:  310:
        -:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
        -:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
        -:  320:int supplyCount(int card, struct gameState *state) {
        3:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
        -:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
    #####:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
    #####:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
    #####:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
        -:  346:int whoseTurn(struct gameState *state) {
       36:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
        -:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
    #####:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
        -:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
    #####:  406:	  j++;
    #####:  407:	}
    #####:  408:    }
    #####:  409:  if ( j >= 3)
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
    #####:  415:}
        -:  416:
        -:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
        -:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
    #####:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
    #####:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
    #####:  484:	}
    #####:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
    #####:  495:	}
    #####:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
    #####:  505:	}
    #####:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
    #####:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
    #####:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
        -:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
       33:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
    #####:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
    #####:  565:  }
        -:  566:
        -:  567:  else{
       33:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
       33:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
       33:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       33:  576:    state->deckCount[player]--;
       33:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
       33:  580:  return 0;
       33:  581:}
        -:  582:
        -:  583:int getCost(int cardNumber)
        -:  584:{
       10:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
        1:  602:      return 6;
        -:  603:    case council_room:
        1:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
        1:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
        1:  614:      return 4;
        -:  615:    case village:
        1:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
        1:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
        1:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
        1:  630:      return 4;
        -:  631:    case embargo: 
        1:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
        1:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
       10:  644:}
        -:  645:
        -:  646:/*
        -:  647:*************
        -:  648:Assignment 2 refactoring functions
        -:  649:*/
        -:  650://call these functions (void?) in cardEffect under it's case to better organize bugs
        -:  651:
        -:  652:
        -:  653://drawntreasure, state, currentplayer, cardDrawn
        -:  654:int refactorAdventurer(int drawntreasure, struct gameState *state, int currentPlayer, int cardDrawn, int z, int *temphand){
    #####:  655:  while(drawntreasure<2){
    #####:  656:  if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  657:    shuffle(currentPlayer, state);
    #####:  658:  }
    #####:  659:  drawCard(currentPlayer, state);
    #####:  660:  cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:  661:  if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####:  662:    drawntreasure++;
        -:  663:  else{
    #####:  664:    temphand[z]=cardDrawn;
    #####:  665:    state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  666:    z++;
        -:  667:  }
        -:  668:      }
    #####:  669:      while(z-1>=0){
    #####:  670:  state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  671:  z=z-1;
        -:  672:      }
    #####:  673:      return 0;
        -:  674:      
        -:  675:}
        -:  676:
        -:  677://i, currentPlayer, state, handPos
        -:  678:int refactorCouncilroom(int i, int currentPlayer, struct gameState *state, int handPos){
        -:  679:  //+4 Cards
    #####:  680:      for (i = 0; i < 4; i++)
        -:  681:  {
    #####:  682:    drawCard(currentPlayer, state);
    #####:  683:  }
        -:  684:      
        -:  685:      //+1 Buy 
        -:  686:      //+1 Buy again (**BUG)
    #####:  687:      state->numBuys++;
    #####:  688:      state->numBuys++;
        -:  689:      
        -:  690:      //Each other player draws a card
    #####:  691:      for (i = 0; i < state->numPlayers; i++)
        -:  692:  {
    #####:  693:    if ( i != currentPlayer )
        -:  694:      {
    #####:  695:        drawCard(i, state);
    #####:  696:      }
    #####:  697:  }
        -:  698:      
        -:  699:      //put played card in played card pile
    #####:  700:      discardCard(handPos, currentPlayer, state, 0);
        -:  701:      
    #####:  702:      return 0;
        -:  703:      
        -:  704:
        -:  705:}
        -:  706:
        -:  707://i, j, state, currentPlayer, choice1, choice2, handPos
        -:  708:int refactorRemodel(int i, int j, struct gameState *state, int choice1, int choice2, int handPos, int currentPlayer){
    #####:  709:  j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  710:
    #####:  711:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  712:  {
    #####:  713:    return -1;
        -:  714:  }
        -:  715:
    #####:  716:      gainCard(choice2, state, 0, currentPlayer);
        -:  717:
        -:  718:      //discard card from hand
    #####:  719:      discardCard(handPos, currentPlayer, state, 0);
    #####:  720:      drawCard(currentPlayer, state);
        -:  721:
        -:  722:      //discard trashed card
    #####:  723:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  724:  {
    #####:  725:    if (state->hand[currentPlayer][i] == j)
        -:  726:      {
    #####:  727:        discardCard(i, currentPlayer, state, 0);      
    #####:  728:        break;
        -:  729:      }
    #####:  730:  }
        -:  731:
        -:  732:
    #####:  733:      return 0;
        -:  734:
    #####:  735:}
        -:  736:
        -:  737://i, currentPlayer, state, handPos,
        -:  738:int refactorSmithy(int i, int currentPlayer, struct gameState *state, int handPos){
        -:  739:  //+3 Cards
    #####:  740:      for (i = 0; i < 3; i++)
        -:  741:  {
    #####:  742:    drawCard(currentPlayer, state);
    #####:  743:  }
        -:  744:      
        -:  745:      //discard card from hand
    #####:  746:      discardCard(handPos, currentPlayer, state, 0);
    #####:  747:      state->numBuys++; // (**BUG)
    #####:  748:      return 0;
        -:  749:    
        -:  750:
        -:  751:}
        -:  752://currentPlayer, state, handPos,
        -:  753:int refactorGreathall(int currentPlayer, struct gameState *state, int handPos){
        -:  754:  //+1 Card
    #####:  755:      drawCard(currentPlayer, state);
        -:  756:      
        -:  757:      //+1 Actions
    #####:  758:      state->numActions++;
        -:  759:      //state->numActions++; //(**BUG)
        -:  760:      
        -:  761:      //discard card from hand
    #####:  762:      discardCard(handPos, currentPlayer, state, 0);
    #####:  763:      return 0;
        -:  764:
        -:  765:}
        -:  766:
        -:  767:/*
        -:  768:**************
        -:  769:*/
        -:  770:
        -:  771:
        -:  772:
        -:  773:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  774:{
       32:  775:  int i=0;
       32:  776:  int j=0;
        -:  777:  int k;
        -:  778:  int x;
        -:  779:  int index;
       32:  780:  int currentPlayer = whoseTurn(state);
       32:  781:  int nextPlayer = currentPlayer + 1;
        -:  782:
       32:  783:  int tributeRevealedCards[2] = {-1, -1};
        -:  784:  int temphand[MAX_HAND];// moved above the if statement
       32:  785:  int drawntreasure=0;
       32:  786:  int cardDrawn=0;
       32:  787:  int z = 0;// this is the counter for the temp hand
       32:  788:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  789:    nextPlayer = 0;
    #####:  790:  }
        -:  791:  
        -:  792:	
        -:  793:  //uses switch to select card and perform actions
       32:  794:  switch( card ) 
        -:  795:    {
        -:  796:    case adventurer:
    #####:  797:      refactorAdventurer(drawntreasure, state, currentPlayer, cardDrawn, z, temphand);
        -:  798:      /*
        -:  799:      while(drawntreasure<2){
        -:  800:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -:  801:	  shuffle(currentPlayer, state);
        -:  802:	}
        -:  803:	drawCard(currentPlayer, state);
        -:  804:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  805:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  806:	  drawntreasure++;
        -:  807:	else{
        -:  808:	  temphand[z]=cardDrawn;
        -:  809:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  810:	  z++;
        -:  811:	}
        -:  812:      }
        -:  813:      while(z-1>=0){
        -:  814:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -:  815:	z=z-1;
        -:  816:      }
        -:  817:      return 0;
        -:  818:			*/
        -:  819:    case council_room:
    #####:  820:      refactorCouncilroom(i, currentPlayer, state, handPos);
        -:  821:    /*
        -:  822:      //+4 Cards
        -:  823:      for (i = 0; i < 4; i++)
        -:  824:	{
        -:  825:	  drawCard(currentPlayer, state);
        -:  826:	}
        -:  827:			
        -:  828:      //+1 Buy
        -:  829:      state->numBuys++;
        -:  830:			
        -:  831:      //Each other player draws a card
        -:  832:      for (i = 0; i < state->numPlayers; i++)
        -:  833:	{
        -:  834:	  if ( i != currentPlayer )
        -:  835:	    {
        -:  836:	      drawCard(i, state);
        -:  837:	    }
        -:  838:	}
        -:  839:			
        -:  840:      //put played card in played card pile
        -:  841:      discardCard(handPos, currentPlayer, state, 0);
        -:  842:			
        -:  843:      return 0;
        -:  844:			*/
        -:  845:    case feast:
        -:  846:      //gain card with cost up to 5
        -:  847:      //Backup hand
    #####:  848:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  849:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  850:	state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  851:      }
        -:  852:      //Backup hand
        -:  853:
        -:  854:      //Update Coins for Buy
    #####:  855:      updateCoins(currentPlayer, state, 5);
    #####:  856:      x = 1;//Condition to loop on
    #####:  857:      while( x == 1) {//Buy one card
    #####:  858:	if (supplyCount(choice1, state) <= 0){
        -:  859:	  if (DEBUG)
        -:  860:	    printf("None of that card left, sorry!\n");
        -:  861:
        -:  862:	  if (DEBUG){
        -:  863:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  864:	  }
    #####:  865:	}
    #####:  866:	else if (state->coins < getCost(choice1)){
    #####:  867:	  printf("That card is too expensive!\n");
        -:  868:
        -:  869:	  if (DEBUG){
        -:  870:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  871:	  }
    #####:  872:	}
        -:  873:	else{
        -:  874:
        -:  875:	  if (DEBUG){
        -:  876:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  877:	  }
        -:  878:
    #####:  879:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  880:	  x = 0;//No more buying cards
        -:  881:
        -:  882:	  if (DEBUG){
        -:  883:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  884:	  }
        -:  885:
        -:  886:	}
        -:  887:      }     
        -:  888:
        -:  889:      //Reset Hand
    #####:  890:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  891:	state->hand[currentPlayer][i] = temphand[i];
    #####:  892:	temphand[i] = -1;
    #####:  893:      }
        -:  894:      //Reset Hand
        -:  895:      			
    #####:  896:      return 0;
        -:  897:			
        -:  898:    case gardens:
    #####:  899:      return -1;
        -:  900:			
        -:  901:    case mine:
    #####:  902:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  903:
    #####:  904:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  905:	{
    #####:  906:	  return -1;
        -:  907:	}
        -:  908:		
    #####:  909:      if (choice2 > treasure_map || choice2 < curse)
        -:  910:	{
    #####:  911:	  return -1;
        -:  912:	}
        -:  913:
    #####:  914:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  915:	{
    #####:  916:	  return -1;
        -:  917:	}
        -:  918:
    #####:  919:      gainCard(choice2, state, 2, currentPlayer);
        -:  920:
        -:  921:      //discard card from hand
    #####:  922:      discardCard(handPos, currentPlayer, state, 0);
        -:  923:
        -:  924:      //discard trashed card
    #####:  925:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  926:	{
    #####:  927:	  if (state->hand[currentPlayer][i] == j)
        -:  928:	    {
    #####:  929:	      discardCard(i, currentPlayer, state, 0);			
    #####:  930:	      break;
        -:  931:	    }
    #####:  932:	}
        -:  933:			
    #####:  934:      return 0;
        -:  935:			
        -:  936:    case remodel:
    #####:  937:      refactorRemodel(i, j, state, choice1, choice2, handPos, currentPlayer);
        -:  938:    /*
        -:  939:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  940:
        -:  941:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  942:	{
        -:  943:	  return -1;
        -:  944:	}
        -:  945:
        -:  946:      gainCard(choice2, state, 0, currentPlayer);
        -:  947:
        -:  948:      //discard card from hand
        -:  949:      discardCard(handPos, currentPlayer, state, 0);
        -:  950:
        -:  951:      //discard trashed card
        -:  952:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  953:	{
        -:  954:	  if (state->hand[currentPlayer][i] == j)
        -:  955:	    {
        -:  956:	      discardCard(i, currentPlayer, state, 0);			
        -:  957:	      break;
        -:  958:	    }
        -:  959:	}
        -:  960:
        -:  961:
        -:  962:      return 0;
        -:  963:      */
        -:  964:		
        -:  965:    case smithy:
    #####:  966:      refactorSmithy(i, currentPlayer, state, handPos);
        -:  967:    /*
        -:  968:      //+3 Cards
        -:  969:      for (i = 0; i < 3; i++)
        -:  970:	{
        -:  971:	  drawCard(currentPlayer, state);
        -:  972:	}
        -:  973:			
        -:  974:      //discard card from hand
        -:  975:      discardCard(handPos, currentPlayer, state, 0);
        -:  976:      return 0;
        -:  977:      */
        -:  978:		
        -:  979:    case village:
        -:  980:      //+1 Card
    #####:  981:      drawCard(currentPlayer, state);
        -:  982:			
        -:  983:      //+2 Actions
    #####:  984:      state->numActions = state->numActions + 2;
        -:  985:			
        -:  986:      //discard played card from hand
    #####:  987:      discardCard(handPos, currentPlayer, state, 0);
    #####:  988:      return 0;
        -:  989:      
        -:  990:		
        -:  991:    case baron:
    #####:  992:      state->numBuys++;//Increase buys by 1!
    #####:  993:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  994:	int p = 0;//Iterator for hand!
    #####:  995:	int card_not_discarded = 1;//Flag for discard set!
    #####:  996:	while(card_not_discarded){
    #####:  997:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  998:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  999:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####: 1000:	    state->discardCount[currentPlayer]++;
    #####: 1001:	    for (;p < state->handCount[currentPlayer]; p++){
    #####: 1002:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####: 1003:	    }
    #####: 1004:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####: 1005:	    state->handCount[currentPlayer]--;
    #####: 1006:	    card_not_discarded = 0;//Exit the loop
    #####: 1007:	  }
    #####: 1008:	  else if (p > state->handCount[currentPlayer]){
        -: 1009:	    if(DEBUG) {
        -: 1010:	      printf("No estate cards in your hand, invalid choice\n");
        -: 1011:	      printf("Must gain an estate if there are any\n");
        -: 1012:	    }
    #####: 1013:	    if (supplyCount(estate, state) > 0){
    #####: 1014:	      gainCard(estate, state, 0, currentPlayer);
    #####: 1015:	      state->supplyCount[estate]--;//Decrement estates
    #####: 1016:	      if (supplyCount(estate, state) == 0){
    #####: 1017:		isGameOver(state);
    #####: 1018:	      }
    #####: 1019:	    }
    #####: 1020:	    card_not_discarded = 0;//Exit the loop
    #####: 1021:	  }
        -: 1022:			    
        -: 1023:	  else{
    #####: 1024:	    p++;//Next card
        -: 1025:	  }
        -: 1026:	}
    #####: 1027:      }
        -: 1028:			    
        -: 1029:      else{
    #####: 1030:	if (supplyCount(estate, state) > 0){
    #####: 1031:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####: 1032:	  state->supplyCount[estate]--;//Decrement Estates
    #####: 1033:	  if (supplyCount(estate, state) == 0){
    #####: 1034:	    isGameOver(state);
    #####: 1035:	  }
    #####: 1036:	}
        -: 1037:      }
        -: 1038:	    
        -: 1039:      
    #####: 1040:      return 0;
        -: 1041:		
        -: 1042:    case great_hall:
    #####: 1043:      refactorGreathall(currentPlayer, state, handPos);
        -: 1044:    /*
        -: 1045:      //+1 Card
        -: 1046:      drawCard(currentPlayer, state);
        -: 1047:			
        -: 1048:      //+1 Actions
        -: 1049:      state->numActions++;
        -: 1050:			
        -: 1051:      //discard card from hand
        -: 1052:      discardCard(handPos, currentPlayer, state, 0);
        -: 1053:      return 0;
        -: 1054:      */
        -: 1055:		
        -: 1056:    case minion:
        -: 1057:      //+1 action
    #####: 1058:      state->numActions++;
        -: 1059:			
        -: 1060:      //discard card from hand
    #####: 1061:      discardCard(handPos, currentPlayer, state, 0);
        -: 1062:			
    #####: 1063:      if (choice1)		//+2 coins
        -: 1064:	{
    #####: 1065:	  state->coins = state->coins + 2;
    #####: 1066:	}
        -: 1067:			
    #####: 1068:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1069:	{
        -: 1070:	  //discard hand
    #####: 1071:	  while(numHandCards(state) > 0)
        -: 1072:	    {
    #####: 1073:	      discardCard(handPos, currentPlayer, state, 0);
        -: 1074:	    }
        -: 1075:				
        -: 1076:	  //draw 4
    #####: 1077:	  for (i = 0; i < 4; i++)
        -: 1078:	    {
    #####: 1079:	      drawCard(currentPlayer, state);
    #####: 1080:	    }
        -: 1081:				
        -: 1082:	  //other players discard hand and redraw if hand size > 4
    #####: 1083:	  for (i = 0; i < state->numPlayers; i++)
        -: 1084:	    {
    #####: 1085:	      if (i != currentPlayer)
        -: 1086:		{
    #####: 1087:		  if ( state->handCount[i] > 4 )
        -: 1088:		    {
        -: 1089:		      //discard hand
    #####: 1090:		      while( state->handCount[i] > 0 )
        -: 1091:			{
    #####: 1092:			  discardCard(handPos, i, state, 0);
        -: 1093:			}
        -: 1094:							
        -: 1095:		      //draw 4
    #####: 1096:		      for (j = 0; j < 4; j++)
        -: 1097:			{
    #####: 1098:			  drawCard(i, state);
    #####: 1099:			}
    #####: 1100:		    }
    #####: 1101:		}
    #####: 1102:	    }
        -: 1103:				
    #####: 1104:	}
    #####: 1105:      return 0;
        -: 1106:		
        -: 1107:    case steward:
       32: 1108:      if (choice1 == 1)
        -: 1109:	{
        -: 1110:	  //+2 cards
        4: 1111:	  drawCard(currentPlayer, state);
        4: 1112:	  drawCard(currentPlayer, state);
        4: 1113:	}
       28: 1114:      else if (choice1 == 2)
        -: 1115:	{
        -: 1116:	  //+2 coins
        4: 1117:	  state->coins = state->coins + 2;
        4: 1118:	}
        -: 1119:      else
        -: 1120:	{
        -: 1121:	  //trash 2 cards in hand
       24: 1122:	  discardCard(choice2, currentPlayer, state, 1);
       24: 1123:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1124:	}
        -: 1125:			
        -: 1126:      //discard card from hand
       32: 1127:      discardCard(handPos, currentPlayer, state, 0);
       32: 1128:      return 0;
        -: 1129:		
        -: 1130:    case tribute:
    #####: 1131:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1132:	if (state->deckCount[nextPlayer] > 0){
    #####: 1133:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1134:	  state->deckCount[nextPlayer]--;
    #####: 1135:	}
    #####: 1136:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1137:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1138:	  state->discardCount[nextPlayer]--;
    #####: 1139:	}
        -: 1140:	else{
        -: 1141:	  //No Card to Reveal
        -: 1142:	  if (DEBUG){
        -: 1143:	    printf("No cards to reveal\n");
        -: 1144:	  }
        -: 1145:	}
    #####: 1146:      }
        -: 1147:	    
        -: 1148:      else{
    #####: 1149:	if (state->deckCount[nextPlayer] == 0){
    #####: 1150:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1151:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1152:	    state->deckCount[nextPlayer]++;
    #####: 1153:	    state->discard[nextPlayer][i] = -1;
    #####: 1154:	    state->discardCount[nextPlayer]--;
    #####: 1155:	  }
        -: 1156:			    
    #####: 1157:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####: 1158:	} 
    #####: 1159:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1160:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1161:	state->deckCount[nextPlayer]--;
    #####: 1162:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1163:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1164:	state->deckCount[nextPlayer]--;
        -: 1165:      }    
        -: 1166:		       
    #####: 1167:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1168:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1169:	state->playedCardCount++;
    #####: 1170:	tributeRevealedCards[1] = -1;
    #####: 1171:      }
        -: 1172:
    #####: 1173:      for (i = 0; i <= 2; i ++){
    #####: 1174:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1175:	  state->coins += 2;
    #####: 1176:	}
        -: 1177:		    
    #####: 1178:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1179:	  drawCard(currentPlayer, state);
    #####: 1180:	  drawCard(currentPlayer, state);
    #####: 1181:	}
        -: 1182:	else{//Action Card
    #####: 1183:	  state->numActions = state->numActions + 2;
        -: 1184:	}
    #####: 1185:      }
        -: 1186:	    
    #####: 1187:      return 0;
        -: 1188:		
        -: 1189:    case ambassador:
    #####: 1190:      j = 0;		//used to check if player has enough cards to discard
        -: 1191:
    #####: 1192:      if (choice2 > 2 || choice2 < 0)
        -: 1193:	{
    #####: 1194:	  return -1;				
        -: 1195:	}
        -: 1196:
    #####: 1197:      if (choice1 == handPos)
        -: 1198:	{
    #####: 1199:	  return -1;
        -: 1200:	}
        -: 1201:
    #####: 1202:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1203:	{
    #####: 1204:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1205:	    {
    #####: 1206:	      j++;
    #####: 1207:	    }
    #####: 1208:	}
    #####: 1209:      if (j < choice2)
        -: 1210:	{
    #####: 1211:	  return -1;				
        -: 1212:	}
        -: 1213:
        -: 1214:      if (DEBUG) 
        -: 1215:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1216:
        -: 1217:      //increase supply count for choosen card by amount being discarded
    #####: 1218:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1219:			
        -: 1220:      //each other player gains a copy of revealed card
    #####: 1221:      for (i = 0; i < state->numPlayers; i++)
        -: 1222:	{
    #####: 1223:	  if (i != currentPlayer)
        -: 1224:	    {
    #####: 1225:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1226:	    }
    #####: 1227:	}
        -: 1228:
        -: 1229:      //discard played card from hand
    #####: 1230:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1231:
        -: 1232:      //trash copies of cards returned to supply
    #####: 1233:      for (j = 0; j < choice2; j++)
        -: 1234:	{
    #####: 1235:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1236:	    {
    #####: 1237:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1238:		{
    #####: 1239:		  discardCard(i, currentPlayer, state, 1);
    #####: 1240:		  break;
        -: 1241:		}
    #####: 1242:	    }
    #####: 1243:	}			
        -: 1244:
    #####: 1245:      return 0;
        -: 1246:		
        -: 1247:    case cutpurse:
        -: 1248:
    #####: 1249:      updateCoins(currentPlayer, state, 2);
    #####: 1250:      for (i = 0; i < state->numPlayers; i++)
        -: 1251:	{
    #####: 1252:	  if (i != currentPlayer)
        -: 1253:	    {
    #####: 1254:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1255:		{
    #####: 1256:		  if (state->hand[i][j] == copper)
        -: 1257:		    {
    #####: 1258:		      discardCard(j, i, state, 0);
    #####: 1259:		      break;
        -: 1260:		    }
    #####: 1261:		  if (j == state->handCount[i])
        -: 1262:		    {
    #####: 1263:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1264:			{
        -: 1265:			  if (DEBUG)
        -: 1266:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1267:			}	
    #####: 1268:		      break;
        -: 1269:		    }		
    #####: 1270:		}
        -: 1271:					
    #####: 1272:	    }
        -: 1273:				
    #####: 1274:	}				
        -: 1275:
        -: 1276:      //discard played card from hand
    #####: 1277:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1278:
    #####: 1279:      return 0;
        -: 1280:
        -: 1281:		
        -: 1282:    case embargo: 
        -: 1283:      //+2 Coins
    #####: 1284:      state->coins = state->coins + 2;
        -: 1285:			
        -: 1286:      //see if selected pile is in play
    #####: 1287:      if ( state->supplyCount[choice1] == -1 )
        -: 1288:	{
    #####: 1289:	  return -1;
        -: 1290:	}
        -: 1291:			
        -: 1292:      //add embargo token to selected supply pile
    #####: 1293:      state->embargoTokens[choice1]++;
        -: 1294:			
        -: 1295:      //trash card
    #####: 1296:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1297:      return 0;
        -: 1298:		
        -: 1299:    case outpost:
        -: 1300:      //set outpost flag
    #####: 1301:      state->outpostPlayed++;
        -: 1302:			
        -: 1303:      //discard card
    #####: 1304:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1305:      return 0;
        -: 1306:		
        -: 1307:    case salvager:
        -: 1308:      //+1 buy
    #####: 1309:      state->numBuys++;
        -: 1310:			
    #####: 1311:      if (choice1)
        -: 1312:	{
        -: 1313:	  //gain coins equal to trashed card
    #####: 1314:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1315:	  //trash card
    #####: 1316:	  discardCard(choice1, currentPlayer, state, 1);	
    #####: 1317:	}
        -: 1318:			
        -: 1319:      //discard card
    #####: 1320:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1321:      return 0;
        -: 1322:		
        -: 1323:    case sea_hag:
    #####: 1324:      for (i = 0; i < state->numPlayers; i++){
    #####: 1325:	if (i != currentPlayer){
    #####: 1326:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1327:	  state->discardCount[i]++;
    #####: 1328:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1329:	}
    #####: 1330:      }
    #####: 1331:      return 0;
        -: 1332:		
        -: 1333:    case treasure_map:
        -: 1334:      //search hand for another treasure_map
    #####: 1335:      index = -1;
    #####: 1336:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1337:	{
    #####: 1338:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1339:	    {
    #####: 1340:	      index = i;
    #####: 1341:	      break;
        -: 1342:	    }
    #####: 1343:	}
    #####: 1344:      if (index > -1)
        -: 1345:	{
        -: 1346:	  //trash both treasure cards
    #####: 1347:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1348:	  discardCard(index, currentPlayer, state, 1);
        -: 1349:
        -: 1350:	  //gain 4 Gold cards
    #####: 1351:	  for (i = 0; i < 4; i++)
        -: 1352:	    {
    #####: 1353:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1354:	    }
        -: 1355:				
        -: 1356:	  //return success
    #####: 1357:	  return 1;
        -: 1358:	}
        -: 1359:			
        -: 1360:      //no second treasure_map found in hand
    #####: 1361:      return -1;
        -: 1362:    }
        -: 1363:	
    #####: 1364:  return -1;
       32: 1365:}
        -: 1366:
        -: 1367:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1368:{
        -: 1369:	
        -: 1370:  //if card is not trashed, added to Played pile 
       80: 1371:  if (trashFlag < 1)
        -: 1372:    {
        -: 1373:      //add card to played pile
       32: 1374:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
       32: 1375:      state->playedCardCount++;
       32: 1376:    }
        -: 1377:	
        -: 1378:  //set played card to -1
       80: 1379:  state->hand[currentPlayer][handPos] = -1;
        -: 1380:	
        -: 1381:  //remove card from player's hand
       80: 1382:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1383:    {
        -: 1384:      //reduce number of cards in hand
       16: 1385:      state->handCount[currentPlayer]--;
       16: 1386:    }
       64: 1387:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1388:    {
        -: 1389:      //reduce number of cards in hand
    #####: 1390:      state->handCount[currentPlayer]--;
    #####: 1391:    }
        -: 1392:  else 	
        -: 1393:    {
        -: 1394:      //replace discarded card with last card in hand
       64: 1395:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1396:      //set last card to -1
       64: 1397:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1398:      //reduce number of cards in hand
       64: 1399:      state->handCount[currentPlayer]--;
        -: 1400:    }
        -: 1401:	
       80: 1402:  return 0;
        -: 1403:}
        -: 1404:
        -: 1405:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1406:{
        -: 1407:  //Note: supplyPos is enum of choosen card
        -: 1408:	
        -: 1409:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1410:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1411:    {
    #####: 1412:      return -1;
        -: 1413:    }
        -: 1414:	
        -: 1415:  //added card for [whoseTurn] current player:
        -: 1416:  // toFlag = 0 : add to discard
        -: 1417:  // toFlag = 1 : add to deck
        -: 1418:  // toFlag = 2 : add to hand
        -: 1419:
    #####: 1420:  if (toFlag == 1)
        -: 1421:    {
    #####: 1422:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1423:      state->deckCount[player]++;
    #####: 1424:    }
    #####: 1425:  else if (toFlag == 2)
        -: 1426:    {
    #####: 1427:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1428:      state->handCount[player]++;
    #####: 1429:    }
        -: 1430:  else
        -: 1431:    {
    #####: 1432:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1433:      state->discardCount[player]++;
        -: 1434:    }
        -: 1435:	
        -: 1436:  //decrease number in supply pile
    #####: 1437:  state->supplyCount[supplyPos]--;
        -: 1438:	 
    #####: 1439:  return 0;
    #####: 1440:}
        -: 1441:
        -: 1442:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1443:{
        -: 1444:  int i;
        -: 1445:	
        -: 1446:  //reset coin count
        5: 1447:  state->coins = 0;
        -: 1448:
        -: 1449:  //add coins for each Treasure card in player's hand
       60: 1450:  for (i = 0; i < state->handCount[player]; i++)
        -: 1451:    {
       25: 1452:      if (state->hand[player][i] == copper)
        -: 1453:	{
       20: 1454:	  state->coins += 1;
       20: 1455:	}
        5: 1456:      else if (state->hand[player][i] == silver)
        -: 1457:	{
    #####: 1458:	  state->coins += 2;
    #####: 1459:	}
        5: 1460:      else if (state->hand[player][i] == gold)
        -: 1461:	{
    #####: 1462:	  state->coins += 3;
    #####: 1463:	}	
       25: 1464:    }	
        -: 1465:
        -: 1466:  //add bonus
        5: 1467:  state->coins += bonus;
        -: 1468:
        5: 1469:  return 0;
        -: 1470:}
        -: 1471:
        -: 1472:
        -: 1473://end of dominion.c
        -: 1474:
