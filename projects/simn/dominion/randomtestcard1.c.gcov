        -:    0:Source:randomtestcard1.c
        -:    0:Graph:randomtestcard1.gcno
        -:    0:Data:randomtestcard1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include <stdlib.h>
        -:    7:#include <time.h>
        -:    8:#include "rngs.h"
        -:    9:
        -:   10:
        -:   11:
        -:   12:#define DEBUG 0
        -:   13:#define NOISY_TEST 1
        -:   14:
        -:   15:int refactorSmithy(int i, int currentPlayer, struct gameState *state, int handPos);
        -:   16:/*
        -:   17:int refactorSmithy(int i, int currentPlayer, struct gameState *state, int handPos){
        -:   18:  //+3 Cards
        -:   19:      for (i = 0; i < 3; i++)
        -:   20:  {
        -:   21:    drawCard(currentPlayer, state);
        -:   22:  }
        -:   23:      
        -:   24:      //discard card from hand
        -:   25:      discardCard(handPos, currentPlayer, state, 0);
        -:   26:      state->numBuys++; // (**BUG)
        -:   27:      return 0;
        -:   28:    
        -:   29:
        -:   30:}
        -:   31:
        -:   32:*/
        -:   33:/*
        -:   34:struct gameState {
        -:   35:  int numPlayers; //number of players
        -:   36:  int supplyCount[treasure_map+1];  //this is the amount of a specific type of card given a specific number.
        -:   37:  int embargoTokens[treasure_map+1];
        -:   38:  int outpostPlayed;
        -:   39:  int outpostTurn;
        -:   40:  int whoseTurn;
        -:   41:  int phase;
        -:   42:  int numActions; //Starts at 1 each turn 
        -:   43:  int coins; // Use as you see fit! 
        -:   44:  int numBuys; // Starts at 1 each turn 
        -:   45:  int hand[MAX_PLAYERS][MAX_HAND];
        -:   46:  int handCount[MAX_PLAYERS];			   --use this
        -:   47:  int deck[MAX_PLAYERS][MAX_DECK];
        -:   48:  int deckCount[MAX_PLAYERS];              --use this
        -:   49:  int discard[MAX_PLAYERS][MAX_DECK];	   
        -:   50:  int discardCount[MAX_PLAYERS];		   --use this
        -:   51:  int playedCards[MAX_DECK];
        -:   52:  int playedCardCount;
        -:   53:};
        -:   54:
        -:   55:****Also check 
        -:   56:
        -:   57:if we check smithy we check if the number of cards of the deck changes after the cardEffect takes place
        -:   58:
        -:   59:*/
        -:   60:
        -:   61:
        -:   62:int main(){
        -:   63:	
        -:   64:	struct gameState *game;
        -:   65:
        -:   66:	int i;
        1:   67:	int k[10] = {adventurer, council_room, feast, gardens, mine,
        -:   68:	       remodel, smithy, village, baron, great_hall};
        -:   69:
        -:   70:	//smithycard specific variables
        1:   71:	int player=0;
        1:   72:	int errors=0;
        -:   73:
        -:   74:
        1:   75:	printf("Testing smithy card. \n");
        1:   76:	printf("RANDOM TESTS. \n");
        1:   77:	int iterations = 100;
        -:   78:	//int treasures[] = {copper, silver, gold};
        -:   79:
        -:   80:
        -:   81:
        1:   82:	srand(time(NULL));
        -:   83:
        -:   84:	int cardCount1, cardCount2;
      202:   85:	for (i=0; i < iterations; i++){
      100:   86:		game = malloc(sizeof(struct gameState));
      100:   87:		int players = rand() % 3 + 2;
        -:   88:		
        -:   89:
      100:   90:		printf("Test %d Init\n", i+1);
        -:   91:
      100:   92:		initializeGame(players, k, rand(), game);
        -:   93:
        -:   94:		//initialized the player's handcount, deckcount, and discard count, and we want to keep track of it
      100:   95:		game->handCount[player] = rand() % MAX_DECK;
      100:   96:		game->deckCount[player] = rand() % MAX_DECK;
      100:   97:		game->discardCount[player] = rand() % MAX_DECK;
        -:   98:
        -:   99:		//refactorAdventurer(int drawntreasure, struct gameState *state, int currentPlayer, int cardDrawn, int z, int *temphand)
      100:  100:		printf("Before Init\n");
      100:  101:		printf("handcount: %d\n", game->handCount[player]);
      100:  102:		printf("deckcount: %d\n", game->deckCount[player]);
      100:  103:		printf("discardcount: %d\n", game->deckCount[player]);
      100:  104:		cardCount1 = game->handCount[player];
        -:  105:
      100:  106:		printf("cardCount: %d\n", cardCount1);
        -:  107:
      100:  108:		cardEffect(smithy, 1, 1, 1, game, 0, 0);
        -:  109:		//adventurer card goes into effect
        -:  110:
        -:  111:
        -:  112:
        -:  113:
      100:  114:		printf("After Init\n");
      100:  115:		printf("handcount: %d\n", game->handCount[player]);
      100:  116:		printf("deckcount: %d\n", game->deckCount[player]);
      100:  117:		printf("discardcount: %d\n", game->deckCount[player]);
        -:  118:		
      100:  119:		int cardCount2 = game->handCount[player];
      100:  120:		printf("cardCount: %d\n", cardCount2);
      100:  121:		free(game);
        -:  122:		//you lose one you gain 3 so 2 difference
      100:  123:		if (cardCount2 - cardCount1 != 2){
    #####:  124:		errors++;
    #####:  125:		printf("***ERROR FOUND");
    #####:  126:		}
      100:  127:	}
        -:  128:
        -:  129:
        -:  130:	
        -:  131:
        1:  132:	printf("\n");
        1:  133:	printf("The number of errors was: %d\n", errors);
        -:  134:
        1:  135:	if (errors > 0){
    #####:  136:		printf("\n **Test completed with errors\n");
    #####:  137:	}
        -:  138:	else{
        1:  139:		printf("\n **Test complete with no errors\n");
        -:  140:	}
        -:  141:
        -:  142:	//use cardEffect to run the card and it's effect onto gamestate game
        -:  143:
        -:  144:
        1:  145:	return 0;
        -:  146:
        -:  147:}
        -:  148:
        -:  149:
