        -:    0:Source:randomtestcard2.c
        -:    0:Graph:randomtestcard2.gcno
        -:    0:Data:randomtestcard2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include <stdlib.h>
        -:    7:#include <time.h>
        -:    8:#include "rngs.h"
        -:    9:
        -:   10:
        -:   11:
        -:   12:#define DEBUG 0
        -:   13:#define NOISY_TEST 1
        -:   14:
        -:   15:int refactorGreathall(int currentPlayer, struct gameState *state, int handPos);
        -:   16:
        -:   17:/*
        -:   18:int refactorGreathall(int currentPlayer, struct gameState *state, int handPos){
        -:   19:  //+1 Card
        -:   20:      drawCard(currentPlayer, state);
        -:   21:      
        -:   22:      //+1 Actions
        -:   23:      state->numActions++;
        -:   24:      
        -:   25:      
        -:   26:      //discard card from hand
        -:   27:      discardCard(handPos, currentPlayer, state, 0);
        -:   28:      return 0;
        -:   29:
        -:   30:}
        -:   31:*/
        -:   32:/*
        -:   33:struct gameState {
        -:   34:  int numPlayers; //number of players
        -:   35:  int supplyCount[treasure_map+1];  //this is the amount of a specific type of card given a specific number.
        -:   36:  int embargoTokens[treasure_map+1];
        -:   37:  int outpostPlayed;
        -:   38:  int outpostTurn;
        -:   39:  int whoseTurn;
        -:   40:  int phase;
        -:   41:  int numActions; //Starts at 1 each turn 
        -:   42:  int coins; // Use as you see fit! 
        -:   43:  int numBuys; // Starts at 1 each turn 
        -:   44:  int hand[MAX_PLAYERS][MAX_HAND];
        -:   45:  int handCount[MAX_PLAYERS];			   --use this
        -:   46:  int deck[MAX_PLAYERS][MAX_DECK];
        -:   47:  int deckCount[MAX_PLAYERS];              --use this
        -:   48:  int discard[MAX_PLAYERS][MAX_DECK];	   --use this
        -:   49:  int discardCount[MAX_PLAYERS];
        -:   50:  int playedCards[MAX_DECK];
        -:   51:  int playedCardCount;
        -:   52:};
        -:   53:
        -:   54:****Also check 
        -:   55:
        -:   56:*/
        -:   57:
        -:   58:int main(){
        -:   59:	
        -:   60:	struct gameState *game;
        -:   61:
        -:   62:	int i;
        1:   63:	int k[10] = {adventurer, council_room, feast, gardens, mine,
        -:   64:	       remodel, smithy, village, baron, great_hall};
        -:   65:
        -:   66:	//greathall specific variables
        1:   67:	int player=0;
        1:   68:	int errors=0;
        -:   69:
        -:   70:
        1:   71:	printf("Testing great hall card. \n");
        1:   72:	printf("RANDOM TESTS. \n");
        1:   73:	int iterations = 100;
        -:   74:	//int treasures[] = {copper, silver, gold};
        -:   75:
        -:   76:
        -:   77:
        1:   78:	srand(time(NULL));
        -:   79:
        -:   80:	int cardCount1, cardCount2;
        -:   81:	int actions1, actions2;
      202:   82:	for (i=0; i < iterations; i++){
      100:   83:		game = malloc(sizeof(struct gameState));
      100:   84:		int players = rand() % 3 + 2;
        -:   85:		
        -:   86:
      100:   87:		printf("Test %d Init\n", i+1);
        -:   88:
      100:   89:		initializeGame(players, k, rand(), game);
        -:   90:
        -:   91:		//initialized the player's handcount, deckcount, and discard count, and we want to keep track of it
      100:   92:		game->handCount[player] = rand() % MAX_DECK;
      100:   93:		game->deckCount[player] = rand() % MAX_DECK;
      100:   94:		game->discardCount[player] = rand() % MAX_DECK;
        -:   95:
        -:   96:		//refactorAdventurer(int drawntreasure, struct gameState *state, int currentPlayer, int cardDrawn, int z, int *temphand)
      100:   97:		printf("Before Init\n");
      100:   98:		printf("handcount: %d\n", game->handCount[player]);
      100:   99:		printf("deckcount: %d\n", game->deckCount[player]);
      100:  100:		printf("discardcount: %d\n", game->deckCount[player]);
      100:  101:		cardCount1 = game->handCount[player];
      100:  102:		actions1 = game->numActions;
      100:  103:		printf("actions1: %d\n", actions1);
        -:  104:
        -:  105:		//printf("cardCount: %d\n", cardCount1);
        -:  106:
      100:  107:		cardEffect(great_hall, 1, 1, 1, game, 0, 0);
        -:  108:		//adventurer card goes into effect
        -:  109:
        -:  110:
        -:  111:
        -:  112:
      100:  113:		printf("After Init\n");
      100:  114:		printf("handcount: %d\n", game->handCount[player]);
      100:  115:		printf("deckcount: %d\n", game->deckCount[player]);
      100:  116:		printf("discardcount: %d\n", game->deckCount[player]);
      100:  117:		printf("actions2: %d\n", actions2);
      100:  118:		cardCount2 = game->handCount[player];
      100:  119:		actions2 = game->numActions;
        -:  120:		//printf("cardCount: %d\n", cardCount2);
      100:  121:		free(game);
        -:  122:
      100:  123:		if (cardCount1 - cardCount2 != 1 && actions2 - actions1 == 2){//it adds 2 actions because of the bug introduced from assignment 2
        -:  124:			//int holder = cardCount2 - cardCount1;
        -:  125:			
    #####:  126:			errors++;
    #####:  127:			printf("***ERROR FOUND\n");
    #####:  128:		}
      100:  129:	}
        -:  130:		
        -:  131:
        -:  132:	
        -:  133:
        1:  134:	printf("\n");
        1:  135:	printf("The number of errors was: %d\n", errors);
        -:  136:
        1:  137:	if (errors > 0){
    #####:  138:		printf("\n **Test completed with errors\n");
    #####:  139:	}
        -:  140:	else{
        1:  141:		printf("\n **Test complete with no errors\n");
        -:  142:	}
        -:  143:
        -:  144:	//use cardEffect to run the card and it's effect onto gamestate game
        -:  145:
        -:  146:
        1:  147:	return 0;
        -:  148:
        -:  149:}
        -:  150:
        -:  151:
