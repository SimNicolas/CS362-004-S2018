        -:    0:Source:unittest3.c
        -:    0:Graph:unittest3.gcno
        -:    0:Data:unittest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include "rngs.h"
        -:    7:#include <stdlib.h>
        -:    8:
        -:    9://supplyCount
        -:   10:int main(){
        -:   11:
        -:   12:	int r;
        1:   13:	int count=0;
        -:   14:	struct gameState state;
        -:   15:	
        1:   16:	int k[10] = {adventurer, council_room, feast, gardens, mine,
        -:   17:	       remodel, smithy, village, baron, great_hall};
        -:   18:
        1:   19:	r = initializeGame(4, k, 1000, &state);//4 players, seed 1000
        -:   20:
        -:   21:	//printf("initializeGame(4, k, 1000, &state) = %d\n", r);
        -:   22:
        -:   23:
        1:   24:	r = supplyCount(great_hall, &state); //should be 12
        -:   25:
        1:   26:	if ( r == 12 ){
        1:   27:		printf("**Great Hall has correct # in supply\n");
        1:   28:	}
        -:   29:	else{
    #####:   30:		count++;
        -:   31:	}
        -:   32:
        1:   33:	r = supplyCount(gardens, &state);
        -:   34:
        1:   35:	if ( r == 12){
        1:   36:		printf("**Gardens has correct # in supply\n");
        1:   37:	}
        -:   38:	else{
    #####:   39:		count++;
        -:   40:	}
        -:   41:
        1:   42:	r = supplyCount(feast, &state);
        -:   43:
        1:   44:	if ( r == 10){
        1:   45:		printf("**Feast has correct # in supply\n");
        1:   46:	}
        -:   47:	else{
    #####:   48:		count++;
        -:   49:	}
        -:   50:
        1:   51:	if(count == 0){
        1:   52:		printf("Testing complete with NO errors\n");
        1:   53:	}
        -:   54:
        -:   55:	else{
    #####:   56:		printf("Testing failed, supply was incorrect\n");
        -:   57:	}
        -:   58:
        1:   59:	return 0;
        -:   60:
        -:   61:
        -:   62:	//silver should be 40
        -:   63:
        -:   64:
        -:   65:	//curse should be 30
        -:   66:	
        -:   67:
        -:   68:
        -:   69:	
        -:   70:}
